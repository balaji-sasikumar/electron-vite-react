{"version":3,"file":"index.js","sources":["../../electron/main/update.ts","../../electron/main/index.ts"],"sourcesContent":["import { app, ipcMain } from \"electron\";\nimport { createRequire } from \"node:module\";\nimport type {\n  ProgressInfo,\n  UpdateDownloadedEvent,\n  UpdateInfo,\n} from \"electron-updater\";\n\nconst { autoUpdater } = createRequire(import.meta.url)(\"electron-updater\");\nimport { dialog } from \"electron\";\nimport { spawn } from \"child_process\";\nconst Opened = createRequire(import.meta.url)(\"@ronomon/opened\");\nexport function update(win: Electron.BrowserWindow) {\n  // When set to false, the update download will be triggered through the API\n  autoUpdater.autoDownload = false;\n  autoUpdater.disableWebInstaller = false;\n  autoUpdater.allowDowngrade = false;\n\n  // start check\n  autoUpdater.on(\"checking-for-update\", function () {});\n  // update available\n  autoUpdater.on(\"update-available\", (arg: UpdateInfo) => {\n    win.webContents.send(\"update-can-available\", {\n      update: true,\n      version: app.getVersion(),\n      newVersion: arg?.version,\n    });\n  });\n  // update not available\n  autoUpdater.on(\"update-not-available\", (arg: UpdateInfo) => {\n    win.webContents.send(\"update-can-available\", {\n      update: false,\n      version: app.getVersion(),\n      newVersion: arg?.version,\n    });\n  });\n\n  // Checking for updates\n  ipcMain.handle(\"check-update\", async () => {\n    if (!app.isPackaged) {\n      const error = new Error(\n        \"The update feature is only available after the package.\"\n      );\n      return { message: error.message, error };\n    }\n\n    try {\n      return await autoUpdater.checkForUpdatesAndNotify();\n    } catch (error) {\n      return { message: \"Network error\", error };\n    }\n  });\n\n  ipcMain.handle(\n    \"open-dialog\",\n    async (ipcEvent: Electron.IpcMainInvokeEvent) => {\n      let filePaths = await dialog.showOpenDialog({\n        properties: [\"openDirectory\", \"openFile\"],\n      });\n      if (filePaths.canceled) {\n        return \"canceled\";\n      }\n      let selectedPath = filePaths.filePaths[0];\n      let spawnRef;\n      if (process.platform === \"darwin\") {\n        spawnRef = spawn(\"open\", [selectedPath]);\n      } else {\n        spawnRef = spawn(\"start\", [selectedPath]);\n      }\n      let paths = [selectedPath];\n\n      let intervalId: NodeJS.Timeout;\n      intervalId = setInterval(async () => {\n        let isFileOpen = await isFileOpened(paths);\n        if (!isFileOpen) {\n          clearInterval(intervalId!);\n          ipcEvent.sender.send(\n            \"main-process-message\",\n            `The file ${selectedPath} is closed.`\n          );\n        }\n      }, 5000);\n    }\n  );\n\n  // Start downloading and feedback on progress\n  ipcMain.handle(\"start-download\", (event: Electron.IpcMainInvokeEvent) => {\n    startDownload(\n      (error, progressInfo) => {\n        if (error) {\n          // feedback download error message\n          event.sender.send(\"update-error\", { message: error.message, error });\n        } else {\n          // feedback update progress message\n          event.sender.send(\"download-progress\", progressInfo);\n        }\n      },\n      () => {\n        // feedback update downloaded message\n        event.sender.send(\"update-downloaded\");\n      }\n    );\n  });\n\n  // Install now\n  ipcMain.handle(\"quit-and-install\", () => {\n    autoUpdater.quitAndInstall(false, true);\n  });\n}\n\nfunction startDownload(\n  callback: (error: Error | null, info: ProgressInfo | null) => void,\n  complete: (event: UpdateDownloadedEvent) => void\n) {\n  autoUpdater.on(\"download-progress\", (info: ProgressInfo) =>\n    callback(null, info)\n  );\n  autoUpdater.on(\"error\", (error: Error) => callback(error, null));\n  autoUpdater.on(\"update-downloaded\", complete);\n  autoUpdater.downloadUpdate();\n}\n\nasync function isFileOpened(paths: string[]): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    Opened.files(\n      paths,\n      function (error: any, hashTable: { [x: string]: boolean }) {\n        if (error) {\n          reject(error);\n        }\n        resolve(hashTable[paths[0]]);\n      }\n    );\n  });\n}\n","import { app, BrowserWindow, shell, ipcMain } from 'electron'\nimport { release } from 'node:os'\nimport { dirname, join } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { update } from './update'\n\nglobalThis.__filename = fileURLToPath(import.meta.url)\nglobalThis.__dirname = dirname(__filename)\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.mjs    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.DIST_ELECTRON = join(__dirname, '../')\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\nprocess.env.VITE_PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.mjs')\nconst url = process.env.VITE_DEV_SERVER_URL\nconst indexHtml = join(process.env.DIST, 'index.html')\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Main window',\n    icon: join(process.env.VITE_PUBLIC, 'favicon.ico'),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // nodeIntegration: true,\n\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      // contextIsolation: false,\n    },\n  })\n\n  if (url) { // electron-vite-vue#298\n    win.loadURL(url)\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools()\n  } else {\n    win.loadFile(indexHtml)\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\n  })\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) shell.openExternal(url)\n    return { action: 'deny' }\n  })\n\n  // Apply electron-updater\n  update(win)\n}\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  win = null\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  })\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`)\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg })\n  }\n})\n\n"],"names":["win","url"],"mappings":"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"}